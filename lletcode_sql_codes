+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| id          | int     |
| num         | varchar |
+-------------+---------+
id is the primary key for this table.
id is an autoincrement column.

 

Write an SQL query to find all numbers that appear at least three times consecutively.

Return the result table in any order.

The query result format is in the following example.

with cte as(
    select num,
    lead(num,1) over() as num1,
    lead(num,2) over() as num2
    from Logs
    )
    select distinct num as ConsecutiveNums from cte where (num=num1) and (num=num2)
    
    
 #############Write an SQL query to find all dates' Id with higher temperatures compared to its previous dates (yesterday).

Return the result table in any order.#######################

Select w1.id from Weather w1
join Weather w2
on w1.recordDate = Date_Add(w2.recordDate, interval 1 Day)
where w1.temperature>w2.temperature

## CountDistinct ####
df.select(countDistinct("Location")).show()

### Get Schema in json format ####
print(df.schema.json())

load the json file and use it to create a DataFrame.

import json
schemaFromJson = StructType.fromJson(json.loads(schema.json))
df3 = spark.createDataFrame(
        spark.sparkContext.parallelize(structureData),schemaFromJson)
df3.printSchema()


Write a SQL query to find the cancellation rate of requests with unbanned users (both client and driver must not be banned) 
each day between "2013-10-01" and "2013-10-03". Round Cancellation Rate to two decimal points.

Return the result table in any order.

select t.request_at as Day , round(
    sum(
        case
        when t.status='completed' then 0 else 1
        end
    )/count(*),2) as 'Cancellation Rate'

from Trips t inner join Users u on t.client_id=u.users_id and u.banned ='No'
inner join Users u1 on t.driver_id = u1.users_id and u1.banned='No'
where t.request_at between '2013-10-01' and '2013-10-03' 
group by t.request_at
order by Day


###########Write an SQL query to report the fraction of players that logged in again on the day after the day they first logged in,
rounded to 2 decimal places. In other words, you need to count the number of players that
logged in for at least two consecutive days starting from their first login date, then divide that number by the total number of players. ##########


select round(count(a2.player_id)/count(a1.player_id),2) as fraction
from (select player_id, min(event_date) as first_Login from Activity  group by player_id)
a1 left join Activity a2 on a1.player_id=a2.player_id and a1.first_Login=a2.event_date-1






    
    
